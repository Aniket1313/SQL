Suppose you are a data analyst at REBU, a ridesharing platform. For a project, you were given three tables:

trips - trips information
riders - users data
cars - autonomous cars

Q.Try out a simple cross join between riders and cars.
Is the result useful?

A.Not Useful
SELECT riders.first,
   riders.last,
   cars.model
FROM riders, cars;



Q.Suppose we want to create a Trip Log with the trips and its users.
Find the columns to join between trips and riders and combine the two tables using a LEFT JOIN.
Let trips be the left table.


SELECT trips.date, 
   trips.pickup, 
   trips.dropoff, 
   trips.type, 
   trips.cost,
   riders.first, 
   riders.last,
   riders.username
FROM trips
LEFT JOIN riders 
  ON trips.rider_id = riders.id;



Q.Suppose we want to create a link between the trips and the cars used during those trips.
Find the columns to join on and combine the trips and cars table using an INNER JOIN.

SELECT *
FROM trips
JOIN cars
  ON trips.car_id = cars.id;

Q.
The new riders data are in! There are three new users this month.
Stack the riders table on top of the new table named riders2.

A.SELECT * FROM riders UNION  SELECT * FROM riders2 ;



What is the average cost for a trip?
 SELECT AVG(COST) FROM trips ;
SELECT ROUND(AVG(cost), 2)
FROM trips; 


REBU is looking to do an email campaign for all the irregular users.

Find all the riders who have used REBU less than 500 times!

If we want to search in both `riders` and `riders2`, then we might have to do something like this:
SELECT *
FROM riders
WHERE total_trips < 500
UNION
SELECT *
FROM riders2
WHERE total_trips < 500;

Q.Calculate the number of cars that are active.
SELECT COUNT(*)
FROM cars
WHERE status = 'active';


Q.Itâ€™s safety recall time for cars that have been on the road for a while.
Write a query that finds the two cars that have the highest trips_completed.

A.
SELECT *
FROM cars
ORDER BY trips_completed DESC
LIMIT 2;
